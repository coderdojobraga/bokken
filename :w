defmodule Bokken.Factories.PairingsFactory do
  @moduledoc """
   A factory to generate pairings related structs
  """
  use ExMachina.Ecto, repo: MyApp.Repo

  alias Bokken.Accounts.{Guardian, Mentor, Ninja, Organizer, User}
  alias Faker.{Avatar, Date, Person, Phone}

  alias Bokken.Events.{
    Lecture, 
    LectureMentorAssistant,
    Location, 
    Team,
    TeamMentor,
    TeamNinja,
    Availability,
    Enrollment,
    Event,
    Lecture
  }

  def user_factory do
    %User{
      email: sequence(:email, &"email-#{&1}@mail.com"),
      password_hash: Argon2.hash_pwd_salt("password1234!"),
      role: sequence(:role, ["organizer", "guardian", "mentor", "ninja"])
    }
  end

  def ninja_factory do
    %Ninja{
      first_name: Person.PtBr.first_name(),
      last_name: Person.PtBr.last_name(),
      birthday: Date.date_of_birth(7..17),
      belt: Enum.random(Ecto.Enum.values(Ninja, :belt)),
      guardian: build(:guardian),
      user: build(:user, role: :ninja)
    }
  end

  def guardian_factory do 
    %Guardian{
      first_name: Person.PtBr.first_name(),
      last_name: Person.PtBr.last_name(),
      mobile: add_mobile_prefix(Phone.PtPt.cell_number()),
      city: Enum.random(Jason.decode!(File.read!("data/pt/cities.json"))),
      user: build(:user, role: :guardian)
    }
  end

  def organizer_factory do
    mentor = mentor_factory()

    %Organizer{
      champion: Enum.random([true, false]),
      mentor: mentor,
      user: mentor.user
    }
  end

  def event_factory do

  end
end
