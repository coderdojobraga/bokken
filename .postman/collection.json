{
	"info": {
		"_postman_id": "6f410fa7-6468-4358-8372-84752d562888",
		"name": "Bokken - Documentation",
		"description": "Bokken is the backend platform for managing session registrations and recording ninjas' progress for [CoderDojo Braga](https://coderdojobraga.org).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Accounts",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Sign up",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sign up status is OK\", function(){",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"Token with set-cookie is present\", function () {",
											"    pm.response.to.have.header(\"set-cookie\");",
											"});",
											"",
											"const token = pm.response.headers.get(\"set-cookie\").split(\"=\")[1]",
											"pm.environment.set(\"token\", token);",
											"",
											"user_id = pm.response.json().id",
											"pm.environment.set(\"user_id\", user_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"password1234\",\n    \"role\": \"mentor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/auth/sign_up",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"sign_up"
									]
								},
								"description": "The signup sets an auth cookie in all the following requests."
							},
							"response": []
						},
						{
							"name": "Sign out",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.unset(\"token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/auth/sign_out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"sign_out"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Sign in\", function(){",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"set-cookie is present\", function () {",
											"    pm.response.to.have.header(\"set-cookie\");",
											"});",
											"",
											"const token = pm.response.headers.get(\"set-cookie\").split(\"=\")[1]",
											"pm.environment.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"peterpan@mail.com\",\n    \"password\": \"password1234\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/auth/sign_in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"sign_in"
									]
								},
								"description": "The signup sets an auth cookie in all the following requests."
							},
							"response": []
						},
						{
							"name": "Verify Account",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{confirmation_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/auth/verify",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get current User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"mentor_id = pm.response.json().id",
											"pm.environment.set(\"mentor_id\", mentor_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/auth/me",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mentors",
					"item": [
						{
							"name": "List Mentors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var template = `",
											"    <table bgcolor=\"#FFFFFF\">",
											"        <tr>",
											"            <th>Photo</th>",
											"            <th>Name</th>",
											"            <th>Mobile</th>",
											"            <th>Birthday</th>",
											"            <th>Major</th>",
											"            <th>Trial</th>",
											"        </tr>",
											"",
											"        {{#each response}}",
											"            <tr>",
											"                <td><img height=100 src=\"{{photo}}\" /></td>",
											"                <td>{{first_name}} {{last_name}}</td>",
											"                <td>{{mobile}}</td>",
											"                <td>{{birthday}}</td>",
											"                <td>{{major}}</td>",
											"                <td>{{trial}}</td>",
											"            </tr>",
											"        {{/each}}",
											"    </table>",
											"`;",
											"",
											"// Set visualizer",
											"pm.visualizer.set(template, {",
											"    // Pass the response body parsed as JSON as `data`",
											"    response: pm.response.json().data",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/mentors",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"mentors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Mentor with avatar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"mentor_assistant_id = pm.response.json().data.id",
											"pm.environment.set(\"mentor_assistant_id\", mentor_assistant_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "mentor[photo]",
											"type": "file",
											"src": "./postman/avatar.png"
										},
										{
											"key": "mentor[first_name]",
											"value": "Nelson",
											"type": "text"
										},
										{
											"key": "mentor[last_name]",
											"value": "Estevão",
											"type": "text"
										},
										{
											"key": "mentor[mobile]",
											"value": "+351 914 360 875",
											"type": "text"
										},
										{
											"key": "mentor[major]",
											"value": "Engenharia Informática",
											"type": "text"
										},
										{
											"key": "mentor[user_id]",
											"value": "{{user_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/mentors",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"mentors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't create a Mentor with same user_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var template = `",
											"    <table bgcolor=\"#FFFFFF\">",
											"        <tr>",
											"            <th>Photo</th>",
											"            <th>Name</th>",
											"            <th>Mobile</th>",
											"            <th>Birthday</th>",
											"            <th>Major</th>",
											"            <th>Trial</th>",
											"        </tr>",
											"",
											"            <tr>",
											"                <td><img height=100 src=\"{{photo}}\" /></td>",
											"                <td>{{first_name}} {{last_name}}</td>",
											"                <td>{{mobile}}</td>",
											"                <td>{{birthday}}</td>",
											"                <td>{{major}}</td>",
											"                <td>{{trial}}</td>",
											"            </tr>",
											"    </table>",
											"`;",
											"",
											"// Set visualizer",
											"pm.visualizer.set(template, {",
											"    // Pass the response body parsed as JSON as `data`",
											"    response: pm.response.json().data",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mentor\": {\n        \"first_name\": \"{{$randomFirstName}}\",\n        \"last_name\": \"{{$randomLastName}}\",\n        \"mobile\": \"+351 912 345 678\",\n        \"birthday\": \"1995-03-29\",\n        \"major\": \"{{$randomJobTitle}}\",\n        \"user_id\": \"{{user_id}}\",\n        \"trial\": true,\n        \"socials\": [\n            {\n                \"name\": \"github\",\n                \"username\": \"nelsonmestevao\"\n            },\n            {\n                \"name\": \"scratch\",\n                \"username\": \"nelsonmestevao\"\n            },\n            {\n                \"name\": \"gitlab\",\n                \"username\": \"nelsonmestevao\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/mentors",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"mentors"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Guardians",
					"item": [
						{
							"name": "List Guardians",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var template = `",
											"    <table bgcolor=\"#FFFFFF\">",
											"        <tr>",
											"            <th>Photo</th>",
											"            <th>Name</th>",
											"            <th>Mobile</th>",
											"            <th>City</th>",
											"        </tr>",
											"",
											"        {{#each response}}",
											"            <tr>",
											"                <td><img height=100 src=\"{{photo}}\" /></td>",
											"                <td>{{first_name}} {{last_name}}</td>",
											"                <td>{{mobile}}</td>",
											"                <td>{{city}}</td>",
											"            </tr>",
											"        {{/each}}",
											"    </table>",
											"`;",
											"",
											"// Set visualizer",
											"pm.visualizer.set(template, {",
											"    // Pass the response body parsed as JSON as `data`",
											"    response: pm.response.json().data",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/guardians",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"guardians"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a valid Guardian",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"guardian\": {\n        \"first_name\": \"Nelson\",\n        \"last_name\": \"de Oliveira\",\n        \"mobile\": \"+351 912345678\",\n        \"user_id\": \"{{user_id}}\",\n        \"city\": \"Vieira do Minho\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/guardians",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"guardians"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Guardian's photo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/guardians`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_guardian);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "guardian[photo]",
											"type": "file",
											"src": "./postman/avatar.png"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/guardians/{{guardian_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"guardians",
										"{{guardian_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Ninjas",
					"item": [
						{
							"name": "List Ninjas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var template = `",
											"    <table bgcolor=\"#FFFFFF\">",
											"        <tr>",
											"            <th>Photo</th>",
											"            <th>Name</th>",
											"            <th>Mobile</th>",
											"            <th>City</th>",
											"        </tr>",
											"",
											"        {{#each response}}",
											"            <tr>",
											"                <td><img height=100 src=\"{{photo}}\" /></td>",
											"                <td>{{first_name}} {{last_name}}</td>",
											"                <td>{{mobile}}</td>",
											"                <td>{{city}}</td>",
											"            </tr>",
											"        {{/each}}",
											"    </table>",
											"`;",
											"",
											"// Set visualizer",
											"pm.visualizer.set(template, {",
											"    // Pass the response body parsed as JSON as `data`",
											"    response: pm.response.json().data",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/ninjas",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Organizer",
					"item": [
						{
							"name": "List Organizers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/organizers",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"organizers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Organizer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"email = `nelson${parseInt((Math.random() * 100), 10)}@mail.com`",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/auth/sign_up`,",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    },",
											"    method: 'POST',",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"email\": email,",
											"            \"password\": \"password1234\",",
											"            \"role\": \"organizer\"",
											"        })",
											"    }",
											"}, utils.create_user)",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/mentors`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_mentor);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"organizer\": {\n        \"champion\":  \"{{$randomBoolean}}\",\n        \"user_id\": \"{{user_id}}\",\n        \"mentor_id\": \"{{mentor_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/organizers",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"organizers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update organizer",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"organizer\": {\n        \"champion\":  true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/organizers/{{organizer_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"organizers",
										"{{organizer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete organizer",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/organizers/{{organizer_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"organizers",
										"{{organizer_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Gamification",
			"item": [
				{
					"name": "Badges",
					"item": [
						{
							"name": "List Badges",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/badges/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"badges",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Badge",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { id } } = pm.response.json();",
											"",
											"pm.environment.set(\"badge_id\", id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"badge\": {\n        \"name\": \"Built {{$randomInt}} projects\",\n        \"description\": \"Para o ninja que farta-se de criar projetos\",\n        \"image\": \"{{$randomAbstractImage}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/badges/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"badges",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Badge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"badge\": {\n        \"image\": \"{{$randomImageUrl}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/badges/{{badge_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"badges",
										"{{badge_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a Badge",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/badges/{{badge_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"badges",
										"{{badge_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ninjas",
					"item": [
						{
							"name": "Get a Ninja to work with",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"ninja_id = pm.response.json().data[0].id",
											"pm.environment.set(\"ninja_id\", ninja_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/ninjas",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Badges given to a Ninja",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"badge_id\": \"1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/ninjas/{{ninja_id}}/badges",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas",
										"{{ninja_id}}",
										"badges"
									]
								}
							},
							"response": []
						},
						{
							"name": "Give a badge to a Ninja",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"badge_id\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/ninjas/{{ninja_id}}/badges",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas",
										"{{ninja_id}}",
										"badges"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a Badge from a Ninja",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/ninjas/{{ninja_id}}/badges/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas",
										"{{ninja_id}}",
										"badges",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Requests referring to badges"
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Teams",
					"item": [
						{
							"name": "List teams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"team_id = pm.response.json().data[1].id",
											"pm.environment.set(\"team_id\", team_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { id } } = pm.response.json();",
											"",
											"pm.environment.set(\"team_id\", id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"team\": {\n        \"name\": \"Yang {{$randomInt}}\",\n        \"description\": \"The best team is {{$name}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/teams/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										""
									]
								},
								"description": "Request that creates a new team."
							},
							"response": []
						},
						{
							"name": "Update a Team",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"team\": {\n        \"description\": \"Changing team description\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}"
									]
								},
								"description": "Change some element of a team"
							},
							"response": []
						},
						{
							"name": "Delete a Team",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate a Ninja to a Team",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/ninjas`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_ninja);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_team);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is OK\", function(){",
											"    pm.response.to.have.status(201);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"ninja_id\": \"{{ninja_id}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}/ninjas",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}",
										"ninjas"
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Mentor to Team",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/mentors`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_mentor);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_team);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is OK\", function(){",
											"    pm.response.to.have.status(201);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"mentor_id\": \"{{mentor_id}}\" \n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}/mentors",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}",
										"mentors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Mentor from Team",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}/mentors/{{mentor_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}",
										"mentors",
										"{{mentor_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Locations",
					"item": [
						{
							"name": "Get locations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/locations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"location_id = pm.response.json().data.id",
											"pm.environment.set(\"location_id\", location_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"location\": {\n        \"name\": \"{{$randomCity}}\",\n        \"address\": \"{{$randomStreetName}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/locations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update location",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"location\": {\n        \"name\": \"{{$randomCity}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/locations/{{location_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations",
										"{{location_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete location",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/locations/{{location_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations",
										"{{location_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Event",
					"item": [
						{
							"name": "List events",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/events",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Event to work with",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"event_id = pm.response.json().data[1].id",
											"pm.environment.set(\"event_id\", event_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/events",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location to work with",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"location_id = pm.response.json().data[0].id",
											"pm.environment.set(\"location_id\", location_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/locations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team to work with",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"team_id = pm.response.json().data[1].id",
											"pm.environment.set(\"team_id\", team_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Events by team",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}/events",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Events by Location",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/locations/{{location_id}}/events",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations",
										"{{location_id}}",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"event_id = pm.response.json().data.id",
											"",
											"pm.environment.set(\"event_id\", event_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"event\": {\n        \"title\": \"Special {{$randomInt}}\",\n        \"online\": \"{{$randomBoolean}}\",\n        \"location_id\": \"{{location_id}}\",\n        \"notes\": \"Great 73 event\",\n        \"team_id\": \"{{team_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/events",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Event",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"event\": {\n        \"notes\": \"Changing event's notes on {{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete event",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Lectures",
			"item": [
				{
					"name": "Ninja to work with",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"ninja_id = pm.response.json().data[0].id",
									"pm.environment.set(\"ninja_id\", ninja_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/ninjas",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ninjas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mentor to work with",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"mentor_id = pm.response.json().data[1].id",
									"pm.environment.set(\"mentor_id\", mentor_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/mentors",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"mentors"
							]
						}
					},
					"response": []
				},
				{
					"name": "List lectures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"lecture_id = pm.response.json().data[0].id",
									"pm.environment.set(\"lecture_id\", lecture_id);",
									"",
									"mentor_assistant0 = pm.response.json().data[0].assistant_mentors[0].id",
									"pm.environment.set(\"mentor_assistant0\", mentor_assistant0);",
									"",
									"mentor_assistant1= pm.response.json().data[0].assistant_mentors[1].id",
									"pm.environment.set(\"mentor_assistant1\", mentor_assistant1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/lectures",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create lecture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lecture\": {\n        \"summary\": \"lecture number {{$randomInt}}\",\n        \"notes\": \"Ninja has made great progress\",\n        \"mentor_id\": \"{{mentor_id}}\",\n        \"event_id\": \"{{event_id}}\",\n        \"ninja_id\": \"{{ninja_id}}\",\n        \"assistant_mentors\": [\"{{mentor_assistant_id}}\"]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/lectures",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"lectures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update lecture",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lecture\": {\n        \"assistant_mentors\": [\"{{mentor_assistant0}}\", \"{{mentor_assistant1}}\"]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/lectures/{{lecture_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"lectures",
								"{{lecture_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Hello, Bokken 👋",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bokken API is running\", function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/",
					"host": [
						"{{host}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const token = pm.environment.get(\"token\");",
					"",
					"if (token) {",
					"  pm.request.headers.add({ key: \"Cookie\", value: `_bokken_key=${token}` });",
					"}",
					"",
					"pm.environment.set(\"utils\", `() => {",
					"    function get_random_index(values) {",
					"        return Math.floor(values.length * Math.random());",
					"    }",
					"",
					"    function setup_request(err, response, item) {",
					"        // Throw if we get an error",
					"        if (err) {",
					"            throw err;",
					"        }",
					"",
					"        // Handle error response",
					"        if (response.code >= 400) {",
					"            console.log(\\`PROBLEM :: \\${response.code} error while getting \\${item}.\\`);",
					"            console.log(response.text());",
					"",
					"            // Throw",
					"            throw new Error(\\`Couldn\\'t get \\${item}. Check console logs.\\`);",
					"        }",
					"    }",
					"    ",
					"    function create_user(err, response) {",
					"        if (err) {",
					"            throw err;",
					"        }",
					"",
					"        if (response.code >= 400) {",
					"            console.log(\\`PROBLEM :: \\${response.code} error while creating a new user.\\`);",
					"            console.log(response.text());",
					"",
					"            // Throw",
					"            throw new Error(\\`Check console logs.\\`);",
					"        }",
					"",
					"        const user = response.json();",
					"",
					"        pm.environment.set(\"user_id\", user.id);",
					"    }",
					"",
					"",
					"    function get_guardian(err, response) {",
					"        setup_request(err, response, \"guardian\");",
					"",
					"        // Store one guardian ID",
					"        const { data }= response.json();",
					"",
					"        const guardian_id = data[get_random_index(data)].id;",
					"",
					"        pm.environment.set(\"guardian_id\", guardian_id);",
					"    }",
					"",
					"    function get_ninja(err, response) {",
					"        setup_request(err, response, \"ninja\");",
					"",
					"        // Store one ninja ID",
					"        const { data }= response.json();",
					"",
					"        const ninja_id = data[get_random_index(data)].id;",
					"",
					"        pm.environment.set(\"ninja_id\", ninja_id);",
					"    }",
					"  ",
					"    function get_mentor(err, response) {",
					"        setup_request(err, response, \"mentor\");",
					"",
					"        // Store one ninja ID",
					"        const { data } = response.json();",
					"",
					"        const mentor_id = data[get_random_index(data)].id;",
					"",
					"        pm.environment.set(\"mentor_id\", mentor_id);",
					"    }",
					"",
					"    function get_team(err, response) {",
					"        setup_request(err, response, \"team\");",
					"    ",
					"        // Store one team ID",
					"        const { data } = response.json();",
					"",
					"        const team_id = data[get_random_index(data)].id;",
					"",
					"        pm.environment.set(\"team_id\", team_id);",
					"    }",
					"",
					"    return { ",
					"        requests: {",
					"            create_user,",
					"            get_guardian,",
					"            get_mentor,",
					"            get_ninja,",
					"            get_team",
					"        } ",
					"    }",
					"}`)",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}