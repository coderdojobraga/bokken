{
	"info": {
		"_postman_id": "0f28098f-19e5-41e3-ad19-43890a5a083d",
		"name": "Bokken - Documentation",
		"description": "Bokken is the backend platform for managing session registrations and recording ninjas' progress for [CoderDojo Braga](https://coderdojobraga.org).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21815073"
	},
	"item": [
		{
			"name": "Accounts",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Sign up",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sign up status is OK\", function(){",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"Token with set-cookie is present\", function () {",
											"    pm.response.to.have.header(\"set-cookie\");",
											"});",
											"",
											"pm.test(\"User is not registered\", function () {",
											"    pm.expect(pm.response.json().registered).to.eql(false);",
											"});",
											"",
											"const token = pm.response.headers.get(\"set-cookie\").split(\"=\")[1]",
											"pm.environment.set(\"token\", token);",
											"",
											"user_id = pm.response.json().id",
											"pm.environment.set(\"user_id\", user_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"password1234\",\n    \"role\": \"mentor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/auth/sign_up",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"sign_up"
									]
								},
								"description": "The signup sets an auth cookie in all the following requests."
							},
							"response": [
								{
									"name": "Sign up",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"password1234\",\n    \"role\": \"mentor\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/auth/sign_up",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"auth",
												"sign_up"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "151"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Wed, 26 May 2021 15:24:06 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FoKnMUCp4EEukywAAAAk"
										},
										{
											"key": "set-cookie",
											"value": "_bokken_key=SFMyNTY.g3QAAAABbQAAABZndWFyZGlhbl9kZWZhdWx0X3Rva2VubQAAAZ9leUpoYkdjaU9pSklVelV4TWlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKaFkzUnBkbVVpT21aaGJITmxMQ0poZFdRaU9pSmliMnRyWlc0aUxDSmxlSEFpT2pFMk1qUTBOakU0TkRjc0ltbGhkQ0k2TVRZeU1qQTBNalkwTnl3aWFYTnpJam9pWW05cmEyVnVJaXdpYW5ScElqb2lZelppWlRVd1kyRXROVEkyTlMwME9EWTVMV0V3TnpJdFlXVm1aR1ZpTlRJM1lqUTFJaXdpYm1KbUlqb3hOakl5TURReU5qUTJMQ0p5YjJ4bElqb2liV1Z1ZEc5eUlpd2ljM1ZpSWpvaVpHTmhOalV4TWpRdE0yVTBPQzAwT0RFM0xUazFNbUl0TVRSak1EUXpZamMzT0dWaUlpd2lkSGx3SWpvaVlXTmpaWE56SW4wLmZNZW1neFBEdGdHR1ZjMnhBbXA0R2xKbnV2b01zNkRUcThjZkJMLTlCeDNuWUprRzh6SEIyWFZKYktTUzBfamhmMzNsNWlrREdQWFNkQ1FIMGc2d0pB.qzMEtQ9ilri4BvJ_MIXhHNMlOTyIo4OhSyb6Wwnbr80; path=/; secure; HttpOnly; SameSite=None"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": false,\n    \"email\": \"Maximillia.Bartell@yahoo.com\",\n    \"id\": \"dca65124-3e48-4817-952b-14c043b778eb\",\n    \"registered\": false,\n    \"role\": \"mentor\",\n    \"verified\": false\n}"
								}
							]
						},
						{
							"name": "Register Mentor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Register status is OK\", function(){",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"User is registered\", function () {",
											"    pm.expect(pm.response.json().registered).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user[first_name]",
											"value": "Carlos",
											"type": "text"
										},
										{
											"key": "user[last_name]",
											"value": "Ribeiro",
											"type": "text"
										},
										{
											"key": "user[photo]",
											"type": "file",
											"src": "./.postman/avatar.png"
										},
										{
											"key": "user[mobile]",
											"value": "+351912345678",
											"type": "text"
										},
										{
											"key": "user[birthday]",
											"value": "1999-12-19",
											"type": "text"
										},
										{
											"key": "user[major]",
											"value": "Engenharia Informática",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/auth/me",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": [
								{
									"name": "Register Mentor",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "user[first_name]",
													"value": "Carlos",
													"type": "text"
												},
												{
													"key": "user[last_name]",
													"value": "Ribeiro",
													"type": "text"
												},
												{
													"key": "user[photo]",
													"type": "file",
													"src": "./.postman/avatar.png"
												},
												{
													"key": "user[mobile]",
													"value": "+351912345678",
													"type": "text"
												},
												{
													"key": "user[birthday]",
													"value": "1999-12-19",
													"type": "text"
												},
												{
													"key": "user[major]",
													"value": "Engenharia Informática",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/auth/me",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"auth",
												"me"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "454"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Sat, 12 Jun 2021 15:52:35 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FofgnRNUSVQSPmoAAAGE"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": false,\n    \"birthday\": \"1999-12-19\",\n    \"email\": \"Garrett85@yahoo.com\",\n    \"first_name\": \"Carlos\",\n    \"id\": \"0ee9f8c0-c619-471f-84fe-3cfe209a85ee\",\n    \"last_name\": \"Ribeiro\",\n    \"major\": \"Engenharia Informática\",\n    \"mentor_id\": \"48af0d9e-82f0-451d-93b9-0cf338cc6c8e\",\n    \"mobile\": \"+351912345678\",\n    \"photo\": \"https://bokken.di.uminho.pt/uploads/avatars/0ee9f8c0-c619-471f-84fe-3cfe209a85ee/thumb.png?v=63790732356\",\n    \"registered\": true,\n    \"role\": \"mentor\",\n    \"socials\": [],\n    \"trial\": true,\n    \"verified\": false\n}"
								}
							]
						},
						{
							"name": "Sign out",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.unset(\"token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/auth/sign_out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"sign_out"
									]
								},
								"description": "User signs out from app."
							},
							"response": []
						},
						{
							"name": "Sign in",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Sign in\", function(){",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"set-cookie is present\", function () {",
											"    pm.response.to.have.header(\"set-cookie\");",
											"});",
											"",
											"pm.test(\"user is registered\", function () {",
											"    pm.expect(pm.response.json().registered).to.eql(true);",
											"});",
											"",
											"const token = pm.response.headers.get(\"set-cookie\").split(\"=\")[1]",
											"pm.environment.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"peterpan@mail.com\",\n    \"password\": \"password1234\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/auth/sign_in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"sign_in"
									]
								},
								"description": "The signup sets an auth cookie in all the following requests."
							},
							"response": [
								{
									"name": "Sign in as Registered Mentor",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"peterpan@mail.com\",\n    \"password\": \"password1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/auth/sign_in",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"auth",
												"sign_in"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "358"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Wed, 26 May 2021 15:24:10 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FoKnMmCVXZma0mAAAAAi"
										},
										{
											"key": "set-cookie",
											"value": "_bokken_key=SFMyNTY.g3QAAAABbQAAABZndWFyZGlhbl9kZWZhdWx0X3Rva2VubQAAAZ5leUpoYkdjaU9pSklVelV4TWlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKaFkzUnBkbVVpT25SeWRXVXNJbUYxWkNJNkltSnZhMnRsYmlJc0ltVjRjQ0k2TVRZeU5EUTJNVGcxTVN3aWFXRjBJam94TmpJeU1EUXlOalV4TENKcGMzTWlPaUppYjJ0clpXNGlMQ0pxZEdraU9pSmtaV1JsWkdSak15MWxabVUxTFRRNVlXSXRZVEU1WmkwMU1qRm1NMkZqWWpOalpXSWlMQ0p1WW1ZaU9qRTJNakl3TkRJMk5UQXNJbkp2YkdVaU9pSnRaVzUwYjNJaUxDSnpkV0lpT2lKa1kyRmtZelV6Tnkwek9XVTNMVFF4TURZdFlURXhNUzFqWXpoa056SmlaalJsTWpFaUxDSjBlWEFpT2lKaFkyTmxjM01pZlEuaGFlczlqbDZHMU9ZdzJuTW1ZUnpsTF9GUEFPVWp3SkRmaXFpbExteWEwTGp4LWZQSXVjNG9jbnMteWM3b1dIVV8xUHNRTlJrWTkwSWRHR3p4R3RNRGc.m-I1FfS-vygNBFh_uEWbxGeJhiNG7EzQ7yZY_F7lHUU; path=/; secure; HttpOnly; SameSite=None"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": true,\n    \"birthday\": \"2008-01-24\",\n    \"email\": \"peterpan@mail.com\",\n    \"first_name\": \"Peter\",\n    \"id\": \"dcadc537-39e7-4106-a111-cc8d72bf4e21\",\n    \"last_name\": \"Pan\",\n    \"major\": null,\n    \"mentor_id\": \"ae8a5c03-8462-4380-b226-b83d9cf7c9c9\",\n    \"mobile\": \"+351 911646914\",\n    \"photo\": \"https://robohash.org/Peter-Pan\",\n    \"registered\": true,\n    \"role\": \"mentor\",\n    \"socials\": [],\n    \"trial\": false,\n    \"verified\": true\n}"
								}
							]
						},
						{
							"name": "Verify Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sign up status is OK\", function(){",
											"    pm.response.to.have.status(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{confirmation_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/auth/verify",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"verify"
									]
								},
								"description": "Verifies if the account is valid and authentic by requesting the token that was previous sent by email to the user upon signup/resend request."
							},
							"response": [
								{
									"name": "Verify Account",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\": \"{{confirmation_token}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/auth/verify",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"auth",
												"verify"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "127"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Mon, 24 May 2021 00:02:11 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FoHXuWAaBchT4qwAAAGB"
										},
										{
											"key": "set-cookie",
											"value": "_bokken_key=SFMyNTY.g3QAAAABbQAAABZndWFyZGlhbl9kZWZhdWx0X3Rva2VubQAAAZ9leUpoYkdjaU9pSklVelV4TWlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKaFkzUnBkbVVpT21aaGJITmxMQ0poZFdRaU9pSmliMnRyWlc0aUxDSmxlSEFpT2pFMk1qUXlNek0zTXpJc0ltbGhkQ0k2TVRZeU1UZ3hORFV6TWl3aWFYTnpJam9pWW05cmEyVnVJaXdpYW5ScElqb2laVFJsT0dOallUQXRZV0prWWkwMFpqUXhMVGt3WVRrdE9Ea3haVE5pTWpreFpESXhJaXdpYm1KbUlqb3hOakl4T0RFME5UTXhMQ0p5YjJ4bElqb2liV1Z1ZEc5eUlpd2ljM1ZpSWpvaVltSTBaalUxT1RrdFpEQTVNeTAwWTJObUxUaGtZVEV0TnpJd01EQXdPVEJpTURVeUlpd2lkSGx3SWpvaVlXTmpaWE56SW4wLjdvTzNFRkxjR0l6V1dVVDkyUDRNX09DWno0dGM5LVotZTBPUU0xcUxzLTFiWTROUUhzeVJzc0VJZ0Z3RmxaYnV6ZkZpSC03d2pFelpKY0hCbHo3aHR3.Y_SNuodC9S-E3S2n1GZjagNfM6kDiH88L96MPvxaOR8; path=/; secure; HttpOnly; SameSite=None"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": false,\n    \"email\": \"Loy_Hudson48@hotmail.com\",\n    \"id\": \"bb4f5599-d093-4ccf-8da1-72000090b052\",\n    \"role\": \"mentor\",\n    \"registered\": false,\n    \"verified\": true\n}"
								},
								{
									"name": "Verify Account with expired token",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\": \"{{confirmation_token}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/auth/verify",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"auth",
												"verify"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "36"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Mon, 24 May 2021 09:54:12 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FoH4B4wxFZc0L-cAAAKC"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": {\n        \"detail\": \"Unauthorized\"\n    }\n}"
								},
								{
									"name": "Verify Account with wrong email (should never happen anyway)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\": \"{{confirmation_token}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/auth/verify",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"auth",
												"verify"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "33"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Mon, 24 May 2021 10:05:33 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FoH4pkt5J1MtnpMAAAVh"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": {\n        \"detail\": \"Not Found\"\n    }\n}"
								}
							]
						},
						{
							"name": "Resend verification email",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/auth/resend",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"resend"
									]
								},
								"description": "Sends a new verification email."
							},
							"response": [
								{
									"name": "Verification email resent",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/api/auth/resend",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"auth",
												"resend"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "0"
										},
										{
											"key": "date",
											"value": "Mon, 24 May 2021 10:09:19 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FoH42r0bTdIPDiIAAAHh"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Verification email not sent because email is already verified",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/api/auth/resend",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"auth",
												"resend"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "date",
											"value": "Mon, 24 May 2021 10:11:43 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FoH4_IWRmY5fEDcAAACj"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get current User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"mentor_id = pm.response.json().id",
											"pm.environment.set(\"mentor_id\", mentor_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/auth/me",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								},
								"description": "Getting the information about current user."
							},
							"response": [
								{
									"name": "Mentor before register",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/auth/me",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"auth",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "127"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Mon, 24 May 2021 00:02:29 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FoHXvYx3Rbr1FHgAAAFD"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": false,\n    \"email\": \"Loy_Hudson48@hotmail.com\",\n    \"id\": \"bb4f5599-d093-4ccf-8da1-72000090b052\",\n    \"role\": \"mentor\",\n    \"verified\": true,\n    \"registered\": false\n}"
								},
								{
									"name": "Mentor after register",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/auth/me",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"auth",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "340"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Mon, 24 May 2021 00:03:04 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FoHXxcLRWuNqxlUAAABC"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": true,\n    \"birthday\": \"1997-03-20\",\n    \"email\": \"peterpan@mail.com\",\n    \"first_name\": \"Peter\",\n    \"id\": \"b9f9582b-5e98-4b4e-b4d6-4c55eb25c464\",\n    \"last_name\": \"Pan\",\n    \"major\": null,\n    \"mentor_id\": \"7f34a42f-ff51-412d-b397-9c78443b1f06\",\n    \"mobile\": \"+351 964428503\",\n    \"photo\": \"https://robohash.org/Peter-Pan\",\n    \"role\": \"mentor\",\n    \"socials\": [],\n    \"trial\": false,\n    \"verified\": true,\n    \"registered\": true\n}"
								}
							]
						},
						{
							"name": "Update current User",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": {\n        \"birthday\": \"2002-07-05\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/auth/me",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mentors",
					"item": [
						{
							"name": "Skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"mentor_skill_id = pm.response.json().data.id;",
											"pm.environment.set(\"mentor_skill_id\", mentor_skill_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"item": [
								{
									"name": "List all mentor skills",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/mentors/{{mentor_id}}/skills",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"mentors",
												"{{mentor_id}}",
												"skills"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create mentor skill",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"skill\": \"{{skill_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/mentors/{{mentor_id}}/skills",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"mentors",
												"{{mentor_id}}",
												"skills"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get mentor skill",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ħost}}/api/mentors/{{mentor_id}}/skills/{{mentor_skill_id}}",
											"host": [
												"{{ħost}}"
											],
											"path": [
												"api",
												"mentors",
												"{{mentor_id}}",
												"skills",
												"{{mentor_skill_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete mentor skill",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/mentors/{{mentor_id}}/skills/{{mentor_skill_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"mentors",
												"{{mentor_id}}",
												"skills",
												"{{mentor_skill_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List all mentor skills (paramaterized)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/mentors/{{mentor_id}}/skills?skill_id={{skill_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"mentors",
												"{{mentor_id}}",
												"skills"
											],
											"query": [
												{
													"key": "skill_id",
													"value": "{{skill_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List Mentors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var template = `",
											"    <table bgcolor=\"#FFFFFF\">",
											"        <tr>",
											"            <th>Photo</th>",
											"            <th>Name</th>",
											"            <th>Mobile</th>",
											"            <th>Birthday</th>",
											"            <th>Major</th>",
											"            <th>Trial</th>",
											"        </tr>",
											"",
											"        {{#each response}}",
											"            <tr>",
											"                <td><img height=100 src=\"{{photo}}\" /></td>",
											"                <td>{{first_name}} {{last_name}}</td>",
											"                <td>{{mobile}}</td>",
											"                <td>{{birthday}}</td>",
											"                <td>{{major}}</td>",
											"                <td>{{trial}}</td>",
											"            </tr>",
											"        {{/each}}",
											"    </table>",
											"`;",
											"",
											"// Set visualizer",
											"pm.visualizer.set(template, {",
											"    // Pass the response body parsed as JSON as `data`",
											"    response: pm.response.json().data",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/mentors",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"mentors"
									]
								},
								"description": "Lists all the mentors."
							},
							"response": []
						},
						{
							"name": "Create a Mentor with avatar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"mentor_id = pm.response.json().data.id",
											"pm.environment.set(\"mentor_id\", mentor_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"email = `nelson${parseInt((Math.random() * 1000), 15)}@mail.com`,",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/auth/sign_up`,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"    body: {",
											"\t    mode: 'raw',",
											"\t\traw: JSON.stringify({",
											"\t\t\t\"email\": email,",
											"\t\t\t\"password\": \"password1234\",",
											"\t\t\t\"role\": \"mentor\",",
											"\t\t}),",
											"\t},",
											"}, utils.create_user);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "mentor[photo]",
											"type": "file",
											"src": "./.postman/avatar.png"
										},
										{
											"key": "mentor[first_name]",
											"value": "Nelson",
											"type": "text"
										},
										{
											"key": "mentor[last_name]",
											"value": "Estevão",
											"type": "text"
										},
										{
											"key": "mentor[mobile]",
											"value": "+351 914 360 875",
											"type": "text"
										},
										{
											"key": "mentor[major]",
											"value": "Engenharia Informática",
											"type": "text"
										},
										{
											"key": "mentor[user_id]",
											"value": "{{user_id}}",
											"type": "text"
										},
										{
											"key": "mentor[birthday]",
											"value": "1999-07-24",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/mentors",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"mentors"
									]
								},
								"description": "Creates a new mentor with an avatar."
							},
							"response": []
						},
						{
							"name": "Can't create a Mentor with same user_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var template = `",
											"    <table bgcolor=\"#FFFFFF\">",
											"        <tr>",
											"            <th>Photo</th>",
											"            <th>Name</th>",
											"            <th>Mobile</th>",
											"            <th>Birthday</th>",
											"            <th>Major</th>",
											"            <th>Trial</th>",
											"        </tr>",
											"",
											"            <tr>",
											"                <td><img height=100 src=\"{{photo}}\" /></td>",
											"                <td>{{first_name}} {{last_name}}</td>",
											"                <td>{{mobile}}</td>",
											"                <td>{{birthday}}</td>",
											"                <td>{{major}}</td>",
											"                <td>{{trial}}</td>",
											"            </tr>",
											"    </table>",
											"`;",
											"",
											"// Set visualizer",
											"pm.visualizer.set(template, {",
											"    // Pass the response body parsed as JSON as `data`",
											"    response: pm.response.json().data",
											"});",
											"",
											"pm.test(\"Status is error on user\", function(){",
											"    pm.response.to.have.status(422);",
											"})",
											"",
											"pm.test(\"User is already registered\", function () {",
											"    pm.expect(pm.response.json().errors.user_id[0]).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mentor\": {\n        \"first_name\": \"{{$randomFirstName}}\",\n        \"last_name\": \"{{$randomLastName}}\",\n        \"mobile\": \"+351 912 345 678\",\n        \"birthday\": \"1995-03-29\",\n        \"major\": \"{{$randomJobTitle}}\",\n        \"user_id\": \"{{user_id}}\",\n        \"trial\": true,\n        \"socials\": [\n            {\n                \"name\": \"github\",\n                \"username\": \"nelsonmestevao\"\n            },\n            {\n                \"name\": \"scratch\",\n                \"username\": \"nelsonmestevao\"\n            },\n            {\n                \"name\": \"gitlab\",\n                \"username\": \"nelsonmestevao\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/mentors",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"mentors"
									]
								},
								"description": "Creates a mentor with an user_id already taken by another entity."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Guardians",
					"item": [
						{
							"name": "List Guardians",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var template = `",
											"    <table bgcolor=\"#FFFFFF\">",
											"        <tr>",
											"            <th>Photo</th>",
											"            <th>Name</th>",
											"            <th>Mobile</th>",
											"            <th>City</th>",
											"        </tr>",
											"",
											"        {{#each response}}",
											"            <tr>",
											"                <td><img height=100 src=\"{{photo}}\" /></td>",
											"                <td>{{first_name}} {{last_name}}</td>",
											"                <td>{{mobile}}</td>",
											"                <td>{{city}}</td>",
											"            </tr>",
											"        {{/each}}",
											"    </table>",
											"`;",
											"",
											"// Set visualizer",
											"pm.visualizer.set(template, {",
											"    // Pass the response body parsed as JSON as `data`",
											"    response: pm.response.json().data",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/guardians",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"guardians"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a valid Guardian",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"guardian\": {\n        \"first_name\": \"Nelson\",\n        \"last_name\": \"de Oliveira\",\n        \"mobile\": \"+351 912345678\",\n        \"user_id\": \"{{user_id}}\",\n        \"city\": \"Vieira do Minho\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/guardians",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"guardians"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Guardian's photo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/guardians`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_guardian);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "guardian[photo]",
											"type": "file",
											"src": "./.postman/avatar.png"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/guardians/{{guardian_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"guardians",
										"{{guardian_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Ninjas",
					"item": [
						{
							"name": "Skills",
							"item": [
								{
									"name": "List all ninja skills",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/ninjas/{{ninja_id}}/skills",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"ninjas",
												"{{ninja_id}}",
												"skills"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ninja skill",
									"script": {
										"exec": [
											"ninja_skill_id = pm.response.json().data.id;",
											"pm.environment.set(\"ninja_skill_id\", ninja_skill_id);"
										],
										"type": "text/javascript"
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"skill\": \"{{skill_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/ninjas/{{ninja_id}}/skills",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"ninjas",
												"{{ninja_id}}",
												"skills"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ninja skill",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/ninjas/{{ninja_id}}/skills/{{ninja_skill_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"ninjas",
												"{{ninja_id}}",
												"skills",
												"{{ninja_skill_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ninja skill",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/ninjas/{{ninja_id}}/skills/{{ninja_skill_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"ninjas",
												"{{ninja_id}}",
												"skills",
												"{{ninja_skill_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List all ninja skills (paramaterized)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/ninjas/{{nnja_id}}/skills?skill_id={{skill_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"ninjas",
												"{{nnja_id}}",
												"skills"
											],
											"query": [
												{
													"key": "skill_id",
													"value": "{{skill_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all Ninjas from a Team",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											" pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_team);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}/ninjas",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}",
										"ninjas"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Ninjas of a Guardian",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var template = `",
											"    <table bgcolor=\"#FFFFFF\">",
											"        <tr>",
											"            <th>Photo</th>",
											"            <th>Name</th>",
											"            <th>Mobile</th>",
											"            <th>City</th>",
											"        </tr>",
											"",
											"        {{#each response}}",
											"            <tr>",
											"                <td><img height=100 src=\"{{photo}}\" /></td>",
											"                <td>{{first_name}} {{last_name}}</td>",
											"                <td>{{mobile}}</td>",
											"                <td>{{city}}</td>",
											"                <td bgcolor=\"{{belt}}\"></td>",
											"            </tr>",
											"        {{/each}}",
											"    </table>",
											"`;",
											"",
											"// Set visualizer",
											"pm.visualizer.set(template, {",
											"    // Pass the response body parsed as JSON as `data`",
											"    response: pm.response.json().data",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/auth/sign_in`,",
											"    method: 'POST',",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ ",
											"            email: \"jorgepalma@mail.com\",",
											"            password: \"password1234\"",
											"        })",
											"    },",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    },",
											"}, (err, response) => {",
											"    if (err) {",
											"        throw err;",
											"    }",
											"",
											"    if (response.code >= 400) {",
											"        console.log(`PROBLEM :: ${response.code} error while signing in.`);",
											"        console.log(response.text());",
											"",
											"        // Throw",
											"        throw new Error(`Check console logs.`);",
											"    }",
											"",
											"    const token = response.headers.toObject()['set-cookie'].split(\"=\")[1];",
											"",
											"    pm.environment.set(\"token\", token);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/ninjas",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a valid Ninja",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/auth/sign_in`,",
											"    method: 'POST',",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ ",
											"            email: \"jorgepalma@mail.com\",",
											"            password: \"password1234\"",
											"        })",
											"    },",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    },",
											"}, (err, response) => {",
											"    if (err) {",
											"        throw err;",
											"    }",
											"",
											"    if (response.code >= 400) {",
											"        console.log(`PROBLEM :: ${response.code} error while signing in.`);",
											"        console.log(response.text());",
											"",
											"        // Throw",
											"        throw new Error(`Check console logs.`);",
											"    }",
											"",
											"    const token = response.headers.toObject()['set-cookie'].split(\"=\")[1];",
											"",
											"    pm.environment.set(\"token\", token);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ninja\": {\n        \"first_name\": \"Nelson\",\n        \"last_name\": \"de Oliveira\",\n        \"mobile\": \"+351 912345678\",\n        \"city\": \"Vieira do Minho\",\n        \"birthday\": \"1996-12-12\",\n        \"belt\": \"white\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/ninjas",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: `${pm.environment.replaceIn('{{host}}')}/api/auth/sign_in`,",
									"    method: 'POST',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({ ",
									"            email: \"jorgepalma@mail.com\",",
									"            password: \"password1234\"",
									"        })",
									"    },",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"}, (err, response) => {",
									"    if (err) {",
									"        throw err;",
									"    }",
									"",
									"    if (response.code >= 400) {",
									"        console.log(`PROBLEM :: ${response.code} error while signing in.`);",
									"        console.log(response.text());",
									"",
									"        // Throw",
									"        throw new Error(`Check console logs.`);",
									"    }",
									"",
									"    const token = response.headers.toObject()['set-cookie'].split(\"=\")[1];",
									"",
									"    pm.environment.set(\"token\", token);",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Organizer",
					"item": [
						{
							"name": "List Organizers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/organizers",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"organizers"
									]
								},
								"description": "Lists all the organizers."
							},
							"response": []
						},
						{
							"name": "Create Organizer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"email = `nelson${parseInt((Math.random() * 100), 10)}@mail.com`",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/auth/sign_up`,",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    },",
											"    method: 'POST',",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"email\": email,",
											"            \"password\": \"password1234\",",
											"            \"role\": \"organizer\"",
											"        })",
											"    }",
											"}, utils.create_user)",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/mentors`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_mentor);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"organizer\": {\n        \"champion\":  \"{{$randomBoolean}}\",\n        \"user_id\": \"{{user_id}}\",\n        \"mentor_id\": \"{{mentor_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/organizers",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"organizers"
									]
								},
								"description": "Creates a new organizer."
							},
							"response": []
						},
						{
							"name": "Update organizer",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"organizer\": {\n        \"champion\":  true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/organizers/{{organizer_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"organizers",
										"{{organizer_id}}"
									]
								},
								"description": "Updates a certain organizer."
							},
							"response": []
						},
						{
							"name": "Delete organizer",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/organizers/{{organizer_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"organizers",
										"{{organizer_id}}"
									]
								},
								"description": "Removes an organizer."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Skills",
					"item": [
						{
							"name": "Get all skills",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/skills",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"skill_id = pm.response.json().data.id;",
											"pm.environment.set(\"skill_id\", skill_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"skill\": {\n        \"name\": \"Postman\",\n        \"description\": \"Postman is an API platform for developers to design, build, test and iterate their APIs\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/skills",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update skill",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"skill\": {\n        \"description\": \"Postman is an API platform for building and using APIs\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/skills/{{skill_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete skill",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/skills/{{skill_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show skill",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/skills/{{skill_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Gamification",
			"item": [
				{
					"name": "Badges",
					"item": [
						{
							"name": "List Badges",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/badges",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"badges"
									]
								},
								"description": "Lists all existing badges."
							},
							"response": []
						},
						{
							"name": "Create a Badge",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { id } } = pm.response.json();",
											"",
											"pm.environment.set(\"badge_id\", id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "badge[name]",
											"value": "Built {{$randomInt}} projects",
											"type": "text"
										},
										{
											"key": "badge[description]",
											"value": "For the ninja who never stops building things",
											"type": "text"
										},
										{
											"key": "badge[image]",
											"type": "file",
											"src": "./.postman/scratch.png"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/badges",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"badges"
									]
								},
								"description": "Creates a new badge."
							},
							"response": [
								{
									"name": "Create a Badge",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "badge[name]",
													"value": "Built {{$randomInt}} projects",
													"type": "text"
												},
												{
													"key": "badge[description]",
													"value": "For the ninja who never stops building things",
													"type": "text"
												},
												{
													"key": "badge[image]",
													"type": "file",
													"src": "./.postman/scratch.png"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/badges/",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"badges",
												""
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "255"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Fri, 11 Jun 2021 22:35:10 GMT"
										},
										{
											"key": "location",
											"value": "/api/badges/380b3725-a37a-4c7d-a15b-50c61de1573c"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FoeoAH6uk7bckTMAAAjB"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"description\": \"For the ninja who never stops building things\",\n        \"id\": \"380b3725-a37a-4c7d-a15b-50c61de1573c\",\n        \"image\": \"https://bokken.di.uminho.pt/uploads/badges/380b3725-a37a-4c7d-a15b-50c61de1573c/original.png?v=63790670110\",\n        \"name\": \"Built 695 projects\"\n    }\n}"
								}
							]
						},
						{
							"name": "Update a Badge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"badge\": {\n        \"description\": \"The ninja is a maker\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/badges/{{badge_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"badges",
										"{{badge_id}}"
									]
								},
								"description": "Updates a badge's field."
							},
							"response": []
						},
						{
							"name": "Delete a Badge",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/badges/{{badge_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"badges",
										"{{badge_id}}"
									]
								},
								"description": "Removes a badge from the system."
							},
							"response": []
						}
					]
				},
				{
					"name": "Ninjas",
					"item": [
						{
							"name": "List Ninjas with Badge",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/badges/{{badge_id}}/ninjas",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"badges",
										"{{badge_id}}",
										"ninjas"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Badges given to a Ninja",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/ninjas/{{ninja_id}}/badges",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas",
										"{{ninja_id}}",
										"badges"
									]
								}
							},
							"response": []
						},
						{
							"name": "Give a badge to a Ninja",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/badges`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_badge);",
											"",
											" pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_team);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams/${pm.environment.replaceIn('{{team_id}}')}/ninjas`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_ninja);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"badge_id\": \"{{badge_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/ninjas/{{ninja_id}}/badges",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas",
										"{{ninja_id}}",
										"badges"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a Badge from a Ninja",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/ninjas/{{ninja_id}}/badges/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas",
										"{{ninja_id}}",
										"badges",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Requests referring to badges",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"    url: `${pm.environment.replaceIn('{{host}}')}/api/auth/sign_in`,",
							"    method: 'POST',",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ ",
							"            email: \"peterpan@mail.com\",",
							"            password: \"password1234\"",
							"        })",
							"    },",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"}, (err, response) => {",
							"    if (err) {",
							"        throw err;",
							"    }",
							"",
							"    if (response.code >= 400) {",
							"        console.log(`PROBLEM :: ${response.code} error while signing in.`);",
							"        console.log(response.text());",
							"",
							"        // Throw",
							"        throw new Error(`Check console logs.`);",
							"    }",
							"",
							"    const token = response.headers.toObject()['set-cookie'].split(\"=\")[1];",
							"",
							"    pm.environment.set(\"token\", token);",
							"});",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Teams",
					"item": [
						{
							"name": "List teams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"team_id = pm.response.json().data[1].id",
											"pm.environment.set(\"team_id\", team_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams"
									]
								},
								"description": "Lists all teams."
							},
							"response": []
						},
						{
							"name": "Create a Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { id } } = pm.response.json();",
											"",
											"pm.environment.set(\"team_id\", id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"team\": {\n        \"name\": \"Yang {{$randomInt}}\",\n        \"description\": \"The best team is {{$name}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/teams/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										""
									]
								},
								"description": "Request that creates a new team."
							},
							"response": []
						},
						{
							"name": "Update a Team",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"team\": {\n        \"description\": \"Changing team description\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}"
									]
								},
								"description": "Change some element of a team"
							},
							"response": []
						},
						{
							"name": "Delete a Team",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}"
									]
								},
								"description": "Deletes a team."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const token = pm.environment.get(\"token\");",
									"",
									"let utils = eval(pm.environment.get(\"utils\"))().requests;",
									"",
									"pm.sendRequest({",
									"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams`,",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Cookie': `_bokken_key=${token}`",
									"    },",
									"}, utils.get_team);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Locations",
					"item": [
						{
							"name": "List locations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/locations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations"
									]
								},
								"description": "Lists all the locations."
							},
							"response": [
								{
									"name": "List locations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/locations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"locations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "352"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Tue, 08 Jun 2021 22:54:43 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "Foa9U_Mjx0QktZQAAAAj"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"address\": \"Rua da Estrada, n.º 39, Braga\",\n            \"id\": \"cfe2f882-526c-4851-9f14-29d75bf54474\",\n            \"name\": \"Braga\"\n        },\n        {\n            \"address\": \"Rua da Estrada, n.º 15, Guimarães\",\n            \"id\": \"c5dd9b94-3b8c-4e79-b718-6d44b0a8be97\",\n            \"name\": \"Guimarães\"\n        },\n        {\n            \"address\": \"Rua da Estrada, n.º 12, Vieira do Minho\",\n            \"id\": \"db396337-bc09-451e-b414-4492605dfa44\",\n            \"name\": \"Vieira do Minho\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Create location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"location_id = pm.response.json().data.id",
											"pm.environment.set(\"location_id\", location_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"location\": {\n        \"name\": \"{{$randomCity}}\",\n        \"address\": \"{{$randomStreetName}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/locations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations"
									]
								},
								"description": "Creates a new location."
							},
							"response": [
								{
									"name": "Create location",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"location\": {\n        \"name\": \"{{$randomCity}}\",\n        \"address\": \"{{$randomStreetName}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/locations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"locations"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "97"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Tue, 08 Jun 2021 22:54:54 GMT"
										},
										{
											"key": "location",
											"value": "/api/locations/17648888-5ccc-4aaa-9b6b-fecf5b70d091"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "Foa9Vmm8tC-a0mAAAAFB"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"address\": \"Stanton Fords\",\n        \"id\": \"17648888-5ccc-4aaa-9b6b-fecf5b70d091\",\n        \"name\": \"Westton\"\n    }\n}"
								}
							]
						},
						{
							"name": "Update location",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"location\": {\n        \"name\": \"{{$randomCity}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/locations/{{location_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations",
										"{{location_id}}"
									]
								},
								"description": "Updates some field of a certain location."
							},
							"response": [
								{
									"name": "Update location",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"location\": {\n        \"name\": \"{{$randomCity}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/locations/{{location_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"locations",
												"{{location_id}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "104"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Tue, 08 Jun 2021 22:55:02 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "Foa9WEHdx10X_SwAAAKE"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"address\": \"Stanton Fords\",\n        \"id\": \"17648888-5ccc-4aaa-9b6b-fecf5b70d091\",\n        \"name\": \"North Fannyton\"\n    }\n}"
								}
							]
						},
						{
							"name": "Delete location",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/locations/{{location_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations",
										"{{location_id}}"
									]
								},
								"description": "Deletes one location."
							},
							"response": [
								{
									"name": "Delete location",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/locations/{{location_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"locations",
												"{{location_id}}"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "date",
											"value": "Tue, 08 Jun 2021 22:55:10 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "Foa9WjNM_1J-fa8AAABD"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Event",
					"item": [
						{
							"name": "List events",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/events",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events"
									]
								},
								"description": "Lists all the events."
							},
							"response": [
								{
									"name": "List events",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/events",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"events"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "2085"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Tue, 08 Jun 2021 22:48:40 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "Foa8_2rO2sMQ8m8AAACB"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"end_time\": \"2021-08-08T12:30:00Z\",\n            \"id\": \"9b0bacdf-5413-4a18-b514-388e786b2c10\",\n            \"location\": {\n                \"address\": \"Rua da Estrada, n.º 39, Braga\",\n                \"id\": \"cfe2f882-526c-4851-9f14-29d75bf54474\",\n                \"name\": \"Braga\"\n            },\n            \"notes\": \"Great 79 event\",\n            \"online\": false,\n            \"start_time\": \"2021-08-08T10:00:00Z\",\n            \"team\": {\n                \"description\": \"Yin is the best team ever\",\n                \"id\": \"767234f0-1331-477f-8ca5-abf564d8551d\",\n                \"name\": \"Yin\"\n            },\n            \"title\": \"Especial Dia da Criança\"\n        },\n        {\n            \"end_time\": \"2021-08-08T12:30:00Z\",\n            \"id\": \"e6ed6e26-96bb-4a10-8bda-ba2a39f2aaa3\",\n            \"location\": {\n                \"address\": \"Rua da Estrada, n.º 39, Braga\",\n                \"id\": \"cfe2f882-526c-4851-9f14-29d75bf54474\",\n                \"name\": \"Braga\"\n            },\n            \"notes\": \"Great 45 event\",\n            \"online\": false,\n            \"start_time\": \"2021-08-08T10:00:00Z\",\n            \"team\": {\n                \"description\": \"Yin is the best team ever\",\n                \"id\": \"767234f0-1331-477f-8ca5-abf564d8551d\",\n                \"name\": \"Yin\"\n            },\n            \"title\": \"Especial Dia da Mãe\"\n        },\n        {\n            \"end_time\": \"2021-08-08T12:30:00Z\",\n            \"id\": \"9ee521af-cbd2-4b38-bdfc-ca835bb1015f\",\n            \"location\": {\n                \"address\": \"Rua da Estrada, n.º 39, Braga\",\n                \"id\": \"cfe2f882-526c-4851-9f14-29d75bf54474\",\n                \"name\": \"Braga\"\n            },\n            \"notes\": \"Great 94 event\",\n            \"online\": false,\n            \"start_time\": \"2021-08-08T10:00:00Z\",\n            \"team\": {\n                \"description\": \"Yin is the best team ever\",\n                \"id\": \"767234f0-1331-477f-8ca5-abf564d8551d\",\n                \"name\": \"Yin\"\n            },\n            \"title\": \"Especial Natal\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Event to work with",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"event_id = pm.response.json().data[1].id",
											"pm.environment.set(\"event_id\", event_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/events",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location to work with",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"location_id = pm.response.json().data[0].id",
											"pm.environment.set(\"location_id\", location_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/locations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team to work with",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"team_id = pm.response.json().data[1].id",
											"pm.environment.set(\"team_id\", team_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Events by team",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}/events",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}",
										"events"
									]
								},
								"description": "Lists all the events of a certain team."
							},
							"response": []
						},
						{
							"name": "Events by Location",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/locations/{{location_id}}/events",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations",
										"{{location_id}}",
										"events"
									]
								},
								"description": "Lists all the events that took place at the same location."
							},
							"response": []
						},
						{
							"name": "Create an event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"event_id = pm.response.json().data.id",
											"",
											"pm.environment.set(\"event_id\", event_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"event\": {\n        \"title\": \"Special {{$randomInt}}\",\n        \"online\": \"{{$randomBoolean}}\",\n        \"location_id\": \"{{location_id}}\",\n        \"notes\": \"Great 73 event\",\n        \"spots_available\": \"{{$randomInt}}\",\n        \"start_time\": \"{{$isoTimestamp}}\",\n        \"end_time\": \"{{$isoTimestamp}}\",\n        \"team_id\": \"{{team_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/events",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events"
									]
								},
								"description": "Creates an event."
							},
							"response": [
								{
									"name": "Create an event",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"event\": {\n        \"title\": \"Special {{$randomInt}}\",\n        \"online\": \"{{$randomBoolean}}\",\n        \"location_id\": \"{{location_id}}\",\n        \"notes\": \"Great 73 event\",\n        \"start_time\": \"2021-08-06T10:00:00Z\",\n        \"end_time\": \"2021-08-06T12:30:00Z\",\n        \"team_id\": \"{{team_id}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/events",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"events"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "287"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Tue, 08 Jun 2021 22:58:28 GMT"
										},
										{
											"key": "location",
											"value": "/api/events/21d7c385-67c6-46ca-9593-9f7cecb71f3a"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "Foa9iD2bWmo6h-QAAACj"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"end_time\": \"2021-08-06T12:30:00Z\",\n        \"id\": \"21d7c385-67c6-46ca-9593-9f7cecb71f3a\",\n        \"location_id\": \"cfe2f882-526c-4851-9f14-29d75bf54474\",\n        \"notes\": \"Great 73 event\",\n        \"online\": true,\n        \"start_time\": \"2021-08-06T10:00:00Z\",\n        \"team_id\": \"767234f0-1331-477f-8ca5-abf564d8551d\",\n        \"title\": \"Special 980\"\n    }\n}"
								}
							]
						},
						{
							"name": "Update Event",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"event\": {\n        \"notes\": \"Changing event's notes on {{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								},
								"description": "Updates a field of a specific event."
							},
							"response": [
								{
									"name": "Update Event",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"event\": {\n        \"notes\": \"Changing event's notes on {{$isoTimestamp}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/events/{{event_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"events",
												"{{event_id}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "323"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Tue, 08 Jun 2021 22:58:40 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "Foa9iv7DhF6MYnUAAADC"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"end_time\": \"2021-08-06T12:30:00Z\",\n        \"id\": \"21d7c385-67c6-46ca-9593-9f7cecb71f3a\",\n        \"location_id\": \"cfe2f882-526c-4851-9f14-29d75bf54474\",\n        \"notes\": \"Changing event's notes on 2021-06-08T22:58:40.279Z\",\n        \"online\": true,\n        \"start_time\": \"2021-08-06T10:00:00Z\",\n        \"team_id\": \"767234f0-1331-477f-8ca5-abf564d8551d\",\n        \"title\": \"Special 980\"\n    }\n}"
								}
							]
						},
						{
							"name": "Delete event",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								},
								"description": "Removes an event."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Lectures",
					"item": [
						{
							"name": "List lectures",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"lecture_id = pm.response.json().data[0].id",
											"pm.environment.set(\"lecture_id\", lecture_id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/lectures",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"lectures"
									]
								},
								"description": "Lists all lectures."
							},
							"response": [
								{
									"name": "List lectures",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/lectures",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"lectures"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-length",
											"value": "7310"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Sat, 19 Jun 2021 18:25:34 GMT"
										},
										{
											"key": "server",
											"value": "Cowboy"
										},
										{
											"key": "x-request-id",
											"value": "FooPBh0r1XBqxlUAAACj"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"assistant_mentors\": [\n                {\n                    \"birthday\": \"1999-08-18\",\n                    \"first_name\": \"Potato\",\n                    \"id\": \"6a2677d4-a45d-4690-b888-543f66775e07\",\n                    \"last_name\": \"Head\",\n                    \"major\": null,\n                    \"mobile\": \"+351 934135802\",\n                    \"photo\": \"https://robohash.org/Potato-Head\",\n                    \"socials\": [],\n                    \"trial\": false\n                },\n                {\n                    \"birthday\": \"2009-04-22\",\n                    \"first_name\": \"Tweedle\",\n                    \"id\": \"c91bf1f8-0a41-4010-bd49-8112c520a634\",\n                    \"last_name\": \"Dum\",\n                    \"major\": null,\n                    \"mobile\": \"+351 965451954\",\n                    \"photo\": \"https://robohash.org/Tweedle-Dum\",\n                    \"socials\": [],\n                    \"trial\": false\n                },\n                {\n                    \"birthday\": \"2009-04-22\",\n                    \"first_name\": \"Tweedle\",\n                    \"id\": \"c91bf1f8-0a41-4010-bd49-8112c520a634\",\n                    \"last_name\": \"Dum\",\n                    \"major\": null,\n                    \"mobile\": \"+351 965451954\",\n                    \"photo\": \"https://robohash.org/Tweedle-Dum\",\n                    \"socials\": [],\n                    \"trial\": false\n                }\n            ],\n            \"attendance\": \"mentor_absent\",\n            \"event\": {\n                \"end_time\": \"2021-08-08T12:30:00Z\",\n                \"id\": \"fa22dbd4-df7f-40d3-860e-425e07582c16\",\n                \"location_id\": \"5ea40b8a-e0ae-4b68-b84a-30336c3c4c40\",\n                \"notes\": \"Great 12 event\",\n                \"online\": false,\n                \"start_time\": \"2021-08-08T10:00:00Z\",\n                \"team_id\": \"9160140a-731d-45f1-b9b5-aeea273742d8\",\n                \"title\": \"Especial Dia da Mãe\"\n            },\n            \"files\": [\n                {\n                    \"description\": \"Scratch from scratch\",\n                    \"document\": \"http://localhost:4000/uploads/snippets/3b981f21-080c-4125-86fd-c5d61a2b9320/3af595ec-aa8d-458f-8c43-7bac9b055e18/project.txt?v=63791345876\",\n                    \"id\": \"16645959-0519-458d-bb21-d9eead2334d5\",\n                    \"title\": \"Notes about the lesson\"\n                }\n            ],\n            \"id\": \"3af595ec-aa8d-458f-8c43-7bac9b055e18\",\n            \"mentor\": {\n                \"birthday\": \"2009-07-16\",\n                \"first_name\": \"Doc\",\n                \"id\": \"076e8f11-6861-4f67-8ffb-2151b771f96a\",\n                \"last_name\": \"Hudson\",\n                \"major\": null,\n                \"mobile\": \"+351 922945281\",\n                \"photo\": \"https://robohash.org/Doc-Hudson\",\n                \"socials\": [],\n                \"trial\": false\n            },\n            \"ninja\": {\n                \"belt\": \"purple\",\n                \"birthday\": \"2000-12-19\",\n                \"first_name\": \"Aberforth\",\n                \"id\": \"76b9ccd9-2338-4222-8116-7f2394f5131d\",\n                \"last_name\": \"Dumbledore\",\n                \"notes\": null,\n                \"photo\": \"https://robohash.org/Aberforth-Dumbledore\",\n                \"socials\": []\n            },\n            \"notes\": null,\n            \"summary\": \"Scratch from scratch\"\n        },\n        {\n            \"assistant_mentors\": [\n                {\n                    \"birthday\": \"2002-08-03\",\n                    \"first_name\": \"Speedy\",\n                    \"id\": \"ca16534a-b794-469e-8b6b-da32ff448414\",\n                    \"last_name\": \"Gonzalez\",\n                    \"major\": null,\n                    \"mobile\": \"+351 926359489\",\n                    \"photo\": \"https://robohash.org/Speedy-Gonzalez\",\n                    \"socials\": [],\n                    \"trial\": false\n                },\n                {\n                    \"birthday\": \"2011-10-10\",\n                    \"first_name\": \"Wendy\",\n                    \"id\": \"12547079-b607-4cc8-822c-a9ab5be2f7cb\",\n                    \"last_name\": \"Darling\",\n                    \"major\": null,\n                    \"mobile\": \"+351 965835593\",\n                    \"photo\": \"https://robohash.org/Wendy-Darling\",\n                    \"socials\": [],\n                    \"trial\": false\n                },\n                {\n                    \"birthday\": \"2000-05-20\",\n                    \"first_name\": \"Queen\",\n                    \"id\": \"93633006-9af3-447d-9c5b-a5e7c3ceb52a\",\n                    \"last_name\": \"of Hearts\",\n                    \"major\": null,\n                    \"mobile\": \"+351 917009109\",\n                    \"photo\": \"https://robohash.org/Queen-of Hearts\",\n                    \"socials\": [],\n                    \"trial\": false\n                }\n            ],\n            \"attendance\": \"mentor_absent\",\n            \"event\": {\n                \"end_time\": \"2021-08-08T12:30:00Z\",\n                \"id\": \"69177be4-c373-4946-abe0-159ee9a78fc1\",\n                \"location_id\": \"5ea40b8a-e0ae-4b68-b84a-30336c3c4c40\",\n                \"notes\": \"Great 1 event\",\n                \"online\": false,\n                \"start_time\": \"2021-08-08T10:00:00Z\",\n                \"team_id\": \"90a3d25c-d346-4093-9926-13769280bc17\",\n                \"title\": \"Especial Dia da Criança\"\n            },\n            \"files\": [\n                {\n                    \"description\": \"First python program\",\n                    \"document\": \"http://localhost:4000/uploads/snippets/08768111-a106-47a2-8a7d-50caf712582c/1d0bb7ab-60d5-4446-b855-c48595a206b8/project.txt?v=63791345876\",\n                    \"id\": \"6c37b2bb-30f5-40d3-aa0d-7a721bf6b7c9\",\n                    \"title\": \"Notes about the lesson\"\n                }\n            ],\n            \"id\": \"1d0bb7ab-60d5-4446-b855-c48595a206b8\",\n            \"mentor\": {\n                \"birthday\": \"1996-07-08\",\n                \"first_name\": \"Eddie\",\n                \"id\": \"26192bd1-07aa-45fb-aa47-1cb26912c710\",\n                \"last_name\": \"Valiant\",\n                \"major\": null,\n                \"mobile\": \"+351 915918886\",\n                \"photo\": \"https://robohash.org/Eddie-Valiant\",\n                \"socials\": [],\n                \"trial\": false\n            },\n            \"ninja\": {\n                \"belt\": null,\n                \"birthday\": \"2006-03-06\",\n                \"first_name\": \"Adrian\",\n                \"id\": \"0216c925-75df-4fbf-b206-534e28af6e8a\",\n                \"last_name\": \"Mole\",\n                \"notes\": null,\n                \"photo\": \"https://robohash.org/Adrian-Mole\",\n                \"socials\": []\n            },\n            \"notes\": null,\n            \"summary\": \"First python program\"\n        },\n        {\n            \"assistant_mentors\": [\n                {\n                    \"birthday\": \"2003-10-14\",\n                    \"first_name\": \"Tiger\",\n                    \"id\": \"664e50eb-1c5f-4940-89f9-3377677af356\",\n                    \"last_name\": \"Lily\",\n                    \"major\": null,\n                    \"mobile\": \"+351 963051633\",\n                    \"photo\": \"https://robohash.org/Tiger-Lily\",\n                    \"socials\": [],\n                    \"trial\": false\n                },\n                {\n                    \"birthday\": \"2010-06-16\",\n                    \"first_name\": \"Tinker\",\n                    \"id\": \"24bc5e0c-a04b-434b-b65d-d5de57dfb52b\",\n                    \"last_name\": \"Bell\",\n                    \"major\": null,\n                    \"mobile\": \"+351 931498597\",\n                    \"photo\": \"https://robohash.org/Tinker-Bell\",\n                    \"socials\": [],\n                    \"trial\": false\n                },\n                {\n                    \"birthday\": \"1998-11-26\",\n                    \"first_name\": \"Scrooge\",\n                    \"id\": \"469144fa-0116-490e-b206-70afc54d6f16\",\n                    \"last_name\": \"McDuck\",\n                    \"major\": null,\n                    \"mobile\": \"+351 960130956\",\n                    \"photo\": \"https://robohash.org/Scrooge-McDuck\",\n                    \"socials\": [],\n                    \"trial\": false\n                }\n            ],\n            \"attendance\": \"both_present\",\n            \"event\": {\n                \"end_time\": \"2021-08-08T12:30:00Z\",\n                \"id\": \"18fffe81-9d24-4dc0-af88-90eeba51c286\",\n                \"location_id\": \"838feaaa-2328-4042-81cc-5216a17e1b8f\",\n                \"notes\": \"Great 69 event\",\n                \"online\": false,\n                \"start_time\": \"2021-08-08T10:00:00Z\",\n                \"team_id\": \"a37595c8-1fe4-43b0-ab8d-308e9d76e1be\",\n                \"title\": null\n            },\n            \"files\": [\n                {\n                    \"description\": \"Learning loops\",\n                    \"document\": \"http://localhost:4000/uploads/snippets/c3f43e39-c8ad-44b9-bbb8-a000cbdf9bc0/15fbcc53-1a6c-4609-a0db-9a7227e80b5d/project.txt?v=63791345876\",\n                    \"id\": \"a141a3d0-4540-43a3-b0f1-427ac883bd97\",\n                    \"title\": \"Notes about the lesson\"\n                }\n            ],\n            \"id\": \"15fbcc53-1a6c-4609-a0db-9a7227e80b5d\",\n            \"mentor\": {\n                \"birthday\": \"2013-08-28\",\n                \"first_name\": \"Roger\",\n                \"id\": \"04c7715d-f260-4ca8-9fd5-881b2d5cc120\",\n                \"last_name\": \"Rabbit\",\n                \"major\": null,\n                \"mobile\": \"+351 920395754\",\n                \"photo\": \"https://robohash.org/Roger-Rabbit\",\n                \"socials\": [],\n                \"trial\": false\n            },\n            \"ninja\": {\n                \"belt\": \"black\",\n                \"birthday\": \"1995-10-14\",\n                \"first_name\": \"Albus\",\n                \"id\": \"aa9de0c2-877e-4b4f-8573-dcb4ac527a2d\",\n                \"last_name\": \"Dumbledore\",\n                \"notes\": null,\n                \"photo\": \"https://robohash.org/Albus-Dumbledore\",\n                \"socials\": []\n            },\n            \"notes\": null,\n            \"summary\": \"Learning loops\"\n        },\n        {\n            \"assistant_mentors\": [\n                {\n                    \"birthday\": \"1995-10-06\",\n                    \"first_name\": \"Robin\",\n                    \"id\": \"82d8c6f6-6f03-4b50-b118-b248d809112d\",\n                    \"last_name\": \"Hood\",\n                    \"major\": null,\n                    \"mobile\": \"+351 939542722\",\n                    \"photo\": \"https://robohash.org/Robin-Hood\",\n                    \"socials\": [],\n                    \"trial\": false\n                },\n                {\n                    \"birthday\": \"2002-08-03\",\n                    \"first_name\": \"Speedy\",\n                    \"id\": \"ca16534a-b794-469e-8b6b-da32ff448414\",\n                    \"last_name\": \"Gonzalez\",\n                    \"major\": null,\n                    \"mobile\": \"+351 926359489\",\n                    \"photo\": \"https://robohash.org/Speedy-Gonzalez\",\n                    \"socials\": [],\n                    \"trial\": false\n                },\n                {\n                    \"birthday\": \"2009-09-24\",\n                    \"first_name\": \"Tweedle\",\n                    \"id\": \"86506244-54e0-48e5-b3af-94a0b0dba4d8\",\n                    \"last_name\": \"Dee\",\n                    \"major\": null,\n                    \"mobile\": \"+351 937846543\",\n                    \"photo\": \"https://robohash.org/Tweedle-Dee\",\n                    \"socials\": [],\n                    \"trial\": false\n                }\n            ],\n            \"attendance\": \"ninja_absent\",\n            \"event\": {\n                \"end_time\": \"2021-08-08T12:30:00Z\",\n                \"id\": \"83c37c7a-d03a-4be2-b1d7-3437ae311a81\",\n                \"location_id\": \"5ea40b8a-e0ae-4b68-b84a-30336c3c4c40\",\n                \"notes\": \"Great 19 event\",\n                \"online\": false,\n                \"start_time\": \"2021-08-08T10:00:00Z\",\n                \"team_id\": \"90a3d25c-d346-4093-9926-13769280bc17\",\n                \"title\": \"Especial Natal\"\n            },\n            \"files\": [\n                {\n                    \"description\": \"Practicing conditional statements\",\n                    \"document\": \"http://localhost:4000/uploads/snippets/c69dea7c-28d2-4e97-9e33-eab99a220eba/5e1f556d-feb0-4cb4-b528-0723e6664d18/project.txt?v=63791345876\",\n                    \"id\": \"552e90c9-2e20-466b-8494-009dc671cceb\",\n                    \"title\": \"Notes about the lesson\"\n                }\n            ],\n            \"id\": \"5e1f556d-feb0-4cb4-b528-0723e6664d18\",\n            \"mentor\": {\n                \"birthday\": \"1998-08-07\",\n                \"first_name\": \"Max\",\n                \"id\": \"6b56f5dd-f8d2-4f7c-919e-8aec2aff4ca0\",\n                \"last_name\": \"Goof\",\n                \"major\": null,\n                \"mobile\": \"+351 932264644\",\n                \"photo\": \"https://robohash.org/Max-Goof\",\n                \"socials\": [],\n                \"trial\": false\n            },\n            \"ninja\": {\n                \"belt\": \"blue\",\n                \"birthday\": \"2011-08-23\",\n                \"first_name\": \"Albus\",\n                \"id\": \"76e2d3f9-37a1-41d4-92d6-1976ce25c41c\",\n                \"last_name\": \"Sverus Potter\",\n                \"notes\": null,\n                \"photo\": \"https://robohash.org/Albus-Sverus Potter\",\n                \"socials\": []\n            },\n            \"notes\": null,\n            \"summary\": \"Practicing conditional statements\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Create lecture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/mentors`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_mentor);",
											"",
											"const mentor_assistant_id = pm.environment.get(\"mentor_id\");",
											"",
											"pm.environment.set(\"mentor_assistant_id\", mentor_assistant_id);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/mentors`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_mentor);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams/${pm.environment.replaceIn('{{team_id}}')}/ninjas`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_ninja);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/events`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_event);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lecture\": {\n        \"summary\": \"lecture number {{$randomInt}}\",\n        \"notes\": \"Ninja has made great progress\",\n        \"mentor_id\": \"{{mentor_id}}\",\n        \"event_id\": \"{{event_id}}\",\n        \"ninja_id\": \"{{ninja_id}}\",\n        \"assistant_mentors\": [\"{{mentor_assistant_id}}\"]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/lectures",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"lectures"
									]
								},
								"description": "Posts a new lecture."
							},
							"response": []
						},
						{
							"name": "Update lecture",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lecture\": {\n        \"assistant_mentors\": [\"{{mentor_assistant0}}\", \"{{mentor_assistant1}}\"]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/lectures/{{lecture_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"lectures",
										"{{lecture_id}}"
									]
								},
								"description": "Changing one lecture."
							},
							"response": []
						},
						{
							"name": "Remove Lecture",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/lectures/{{lecture_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"lectures",
										"{{lecture_id}}"
									]
								},
								"description": "Deletes a lecture."
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Ninjas",
					"item": [
						{
							"name": "List Ninjas from an Event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/events`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_event);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}/ninjas",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"ninjas"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Ninja on Event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/events`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_event);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams/${pm.environment.replaceIn('{{team_id}}')}/ninjas`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_ninja);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ninja_id\": \"{{ninja_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}/ninjas",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"ninjas"
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Mentor to Team",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/mentors`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_mentor);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_team);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is OK\", function(){",
											"    pm.response.to.have.status(201);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"mentor_id\": \"{{mentor_id}}\" \n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}/mentors",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}",
										"mentors"
									]
								},
								"description": "Associates a mentor to a certain team."
							},
							"response": []
						},
						{
							"name": "Associate a Ninja to a Team",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_team);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams/${pm.environment.replaceIn('{{team_id}}')}/ninjas`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_ninja);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_team);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is OK\", function(){",
											"    pm.response.to.have.status(201);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"ninja_id\": \"{{ninja_id}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}/ninjas",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}",
										"ninjas"
									]
								},
								"description": "Associates a certain ninja to a certain team."
							},
							"response": []
						},
						{
							"name": "Remove Mentor from Team",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/teams/{{team_id}}/mentors/{{mentor_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"teams",
										"{{team_id}}",
										"mentors",
										"{{mentor_id}}"
									]
								},
								"description": "Disengages a certain mentor from a certain team."
							},
							"response": []
						}
					]
				},
				{
					"name": "Enrollment",
					"item": [
						{
							"name": "List enrollments of ninja",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ninja_id\": {{ninja_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}/enrollments",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"enrollments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List enrollments of event",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"event_id\": {{event_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}/enrollments",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"enrollments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Enrollment",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}/enrollments/{{enrollment_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"enrollments",
										"{{enrollment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an enrollment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"enrollment_id = pm.response.json().data.id;",
											"pm.environment.set(\"enrollment_id\", enrollment_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"enrollment\" : {\n        \"ninja_id\": \"{{ninja_id}}\",\n        \"event_id\": \"{{event_id}}\",\n        \"accepted\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}/enrollments",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"enrollments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update enrollment",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"enrollment\" : {\n        \"id\": \"{{enrollment_id}}\",\n        \"ninja_id\": \"{{ninja_id}}\",\n        \"event_id\": \"{{event_id}}\",\n        \"accepted\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/events/{{event_id}},enrollments/{{enrollment_id}},",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}},enrollments",
										"{{enrollment_id}},"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an enrollment",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/events/{{event_id}}/enrollments/{{enrollment_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"enrollments",
										"{{enrollment_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Availability",
					"item": [
						{
							"name": "List the availabilities for an event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/events`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_event);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"event_id\": \"{{event_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/events/{{event_id}}/availabilities",
								"description":"Lists all the availabilities for a given event."
							},
							"response": []
						},
						{
							"name": "Create an availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"availability_id = pm.response.json().data.id;",
											"pm.environment.set(\"availability_id\", availability_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"availability\" : {\n        \"mentor_id\": \"{{mentor_id}}\",\n        \"event_id\": \"{{event_id}}\",\n        \"is_available?\": \"{{$randomBoolean}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/events/{{event_id}}/availabilities",
								"description": "Sets the availability of a mentor regarding an event."
							},
							"response": []
						},
						{
							"name": "Update availability",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"availability\" : {\n        \"id\": \"{{availability_id}}\",\n        \"mentor_id\": \"{{mentor_id}}\",\n        \"event_id\": \"{{event_id}}\",\n        \"is_available?\": \"{{$randomBoolean}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/events/{{event_id}}/availabilities/{{availability_id}}",
								"description": "Updates the availability of a mentor regarding an event."
							}

						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"    url: `${pm.environment.replaceIn('{{host}}')}/api/auth/sign_in`,",
							"    method: 'POST',",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ ",
							"            email: \"peterpan@mail.com\",",
							"            password: \"password1234\"",
							"        })",
							"    },",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"}, (err, response) => {",
							"    if (err) {",
							"        throw err;",
							"    }",
							"",
							"    if (response.code >= 400) {",
							"        console.log(`PROBLEM :: ${response.code} error while signing in.`);",
							"        console.log(response.text());",
							"",
							"        // Throw",
							"        throw new Error(`Check console logs.`);",
							"    }",
							"",
							"    const token = response.headers.toObject()['set-cookie'].split(\"=\")[1];",
							"",
							"    pm.environment.set(\"token\", token);",
							"});",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Documents",
			"item": [
				{
					"name": "Files",
					"item": [
						{
							"name": "List Files",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/files",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"files"
									]
								},
								"description": "List all files"
							},
							"response": []
						},
						{
							"name": "Create a file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { id } } = pm.response.json();",
											"",
											"pm.environment.set(\"file_id\", id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams/${pm.environment.replaceIn('{{team_id}}')}/ninjas`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_ninja);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file[description]",
											"value": "A {{$randomAdjective}} game with {{$randomBs}}",
											"description": " ",
											"type": "text"
										},
										{
											"key": "file[document]",
											"type": "file",
											"src": "./.postman/file.txt"
										},
										{
											"key": "file[ninja_id]",
											"value": "{{ninja_id}}",
											"type": "text"
										},
										{
											"key": "file[title]",
											"value": "Game about {{$randomAdjective}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/files",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update File",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"file\": {\n        \"description\": \"My super {{$randomColor}} project\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/files/{{file_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"files",
										"{{file_id}}"
									]
								},
								"description": "Changing a file field."
							},
							"response": []
						},
						{
							"name": "Delete File",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/files/{{file_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"files",
										"{{file_id}}"
									]
								},
								"description": "Removes a file"
							},
							"response": []
						}
					]
				},
				{
					"name": "Ninjas",
					"item": [
						{
							"name": "List Ninja files",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"",
											"let utils = eval(pm.environment.get(\"utils\"))().requests;",
											"",
											" pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_team);",
											"",
											"pm.sendRequest({",
											"    url: `${pm.environment.replaceIn('{{host}}')}/api/teams/${pm.environment.replaceIn('{{team_id}}')}/ninjas`,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Cookie': `_bokken_key=${token}`",
											"    },",
											"}, utils.get_ninja);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/ninjas/{{ninja_id}}/files",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"ninjas",
										"{{ninja_id}}",
										"files"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Files or Documents that a ninja has done during a lecture or as homework.\nThese files can be uploaded by the ninja or his mentors."
		},
		{
			"name": "Hello, Bokken 👋",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bokken API is running\", function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/",
					"host": [
						"{{host}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const token = pm.environment.get(\"token\");",
					"",
					"if (token) {",
					"  pm.request.headers.add({ key: \"Cookie\", value: `_bokken_key=${token}` });",
					"}",
					"",
					"pm.environment.set(\"utils\", `() => {",
					"    function get_random_index(values) {",
					"        return Math.floor(values.length * Math.random());",
					"    }",
					"",
					"    function setup_request(err, response, item) {",
					"        // Throw if we get an error",
					"        if (err) {",
					"            throw err;",
					"        }",
					"",
					"        // Handle error response",
					"        if (response.code >= 400) {",
					"            console.log(\\`PROBLEM :: \\${response.code} error while getting \\${item}.\\`);",
					"            console.log(response.text());",
					"",
					"            // Throw",
					"            throw new Error(\\`Couldn\\'t get \\${item}. Check console logs.\\`);",
					"        }",
					"    }",
					"    ",
					"    function create_user(err, response) {",
					"        if (err) {",
					"            throw err;",
					"        }",
					"",
					"        if (response.code >= 400) {",
					"            console.log(\\`PROBLEM :: \\${response.code} error while creating a new user.\\`);",
					"            console.log(response.text());",
					"",
					"            // Throw",
					"            throw new Error(\\`Check console logs.\\`);",
					"        }",
					"",
					"        const user = response.json();",
					"",
					"        pm.environment.set(\"user_id\", user.id);",
					"    }",
					"",
					"",
					"    function get_guardian(err, response) {",
					"        setup_request(err, response, \"guardian\");",
					"",
					"        // Store one guardian ID",
					"        const { data }= response.json();",
					"",
					"        const guardian_id = data[get_random_index(data)].id;",
					"",
					"        pm.environment.set(\"guardian_id\", guardian_id);",
					"    }",
					"",
					"    function get_ninja(err, response) {",
					"        setup_request(err, response, \"ninja\");",
					"",
					"        // Store one ninja ID",
					"        const { data }= response.json();",
					"",
					"        const ninja_id = data[get_random_index(data)].id;",
					"",
					"        pm.environment.set(\"ninja_id\", ninja_id);",
					"    }",
					"  ",
					"    function get_mentor(err, response) {",
					"        setup_request(err, response, \"mentor\");",
					"",
					"        // Store one ninja ID",
					"        const { data } = response.json();",
					"",
					"        const mentor_id = data[get_random_index(data)].id;",
					"",
					"        pm.environment.set(\"mentor_id\", mentor_id);",
					"    }",
					"",
					"    function get_team(err, response) {",
					"        setup_request(err, response, \"team\");",
					"    ",
					"        // Store one team ID",
					"        const { data } = response.json();",
					"",
					"        const team_id = data[get_random_index(data)].id;",
					"",
					"        pm.environment.set(\"team_id\", team_id);",
					"    }",
					"",
					"    function get_badge(err, response) {",
					"        setup_request(err, response, \"badge\");",
					"    ",
					"        // Store one badge ID",
					"        const { data } = response.json();",
					"",
					"        const badge_id = data[get_random_index(data)].id;",
					"",
					"        pm.environment.set(\"badge_id\", badge_id);",
					"    }",
					"",
					"    function get_event(err, response) {",
					"        setup_request(err, response, \"event\");",
					"    ",
					"        // Store one event ID",
					"        const { data } = response.json();",
					"",
					"        const event_id = data[get_random_index(data)].id;",
					"",
					"        pm.environment.set(\"event_id\", event_id);",
					"    }",
					"",
					"    return { ",
					"        requests: {",
					"            create_user,",
					"            get_guardian,",
					"            get_mentor,",
					"            get_ninja,",
					"            get_team,",
					"            get_badge,",
					"            get_event",
					"        } ",
					"    }",
					"}`)",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}