#!/usr/bin/env bash

set -Eeuo pipefail

BASE_DIR=$(dirname "${BASH_SOURCE[0]:-$0}")
cd "${BASE_DIR}/.." || exit 127

# shellcheck source=../scripts/helpers.sh
. scripts/helpers.sh
# shellcheck source=../scripts/logging.sh
. scripts/logging.sh
# shellcheck source=../scripts/utils.sh
. scripts/utils.sh

PROGRAM=$(basename "${BASH_SOURCE[0]:-$0}")
VERSION=0.5.4

function display_help() {
  cat <<EOF
  $(help_title_section Usage)
    ${PROGRAM} [options] <command>

  $(help_title_section Commands)
    prod              Deploy to production environment.
    stg               Deploy to staging environment [default command].

  $(help_title_section Options)
    -h --help         Show this screen.
    -v --version      Show version.
EOF
}

function deploy() {
  local file
  local env

  env=${1:-stg}

  file="docker-compose.${env}.yml"

  load_env_file ".env.${env}"

  [ -z "${DOCKER_HOST?${RED}Remote server is required${RESET}}" ] && exit 1

  docker-compose -f "$file" -p "bokken_${env}" pull
  docker-compose -f "$file" -p "bokken_${env}" build
  docker-compose -f "$file" -p "bokken_${env}" up -d db
  docker-compose -f "$file" -p "bokken_${env}" run --rm api eval "Bokken.Release.migrate"
  docker-compose -f "$file" -p "bokken_${env}" up -d api

  log_success "Successfully deployed ${env} to ${CYAN}${DOCKER_HOST}${RESET}"
}

case ${1:-stg} in
  -h | --help)
    display_help
    ;;
  -v | --version)
    display_version "${VERSION}" "${PROGRAM}"
    ;;
  prod | stg)
    deploy "${1:-stg}"
    ;;
  *)
    display_help >&2
    exit 1
    ;;
esac
